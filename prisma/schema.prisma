generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles    @default(ADMIN)
}

model Seller {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  balance     Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phone       String        @unique
  active      Status        @default(PENDING)
  image       String
  Debtor      Debtor[]
  DebtorImage DebtorImage[]
  Messages    Message[]
  Nasiya      Nasiya[]
  Sample      Sample[]
}

model Debtor {
  id             String           @id @default(uuid())
  name           String
  address        String
  comment        String?
  sellerId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  star           Boolean?         @default(false)
  Seller         Seller           @relation(fields: [sellerId], references: [id])
  Images         DebtorImage[]
  Phone          DebtorPhone[]
  Message        Message[]
  Nasiya         Nasiya[]
  Payment        Payment[]
  PaymentHistory paymentHistory[]
}

model Nasiya {
  id             String           @id @default(uuid())
  name           String
  startDate      String
  comment        String?
  debtorId       String
  sum            Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  monthlySum     Int
  remainedSum    Int
  sellerId       String?
  period         Int
  endDate        String?          @default("07.08.2025")
  Debtor         Debtor           @relation(fields: [debtorId], references: [id])
  Seller         Seller?          @relation(fields: [sellerId], references: [id])
  nasiyaImages   NasiyaImage[]
  PaidMonths     PaymentPeriod[]
  PaymentHistory paymentHistory[]
}

model Payment {
  id          String   @id @default(uuid())
  sum         Int
  debtorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nasiyaId    String?
  periodMonth Int
  Debtor      Debtor   @relation(fields: [debtorId], references: [id])
}

model paymentHistory {
  id       String   @id @default(uuid())
  amount   Int
  debtorId String
  createAt DateTime @default(now())
  nasiyaId String?
  Debtor   Debtor   @relation(fields: [debtorId], references: [id])
  Nasiya   Nasiya?  @relation(fields: [nasiyaId], references: [id])
}

model Sample {
  id        String   @id @default(uuid())
  comment   String
  isActive  Boolean  @default(true)
  sellerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  text      String
  isSend    Boolean  @default(true)
  debtorId  String
  sellerId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  debtor    Debtor   @relation(fields: [debtorId], references: [id])
  Seller    Seller?  @relation(fields: [sellerId], references: [id])
}

model PaymentPeriod {
  id        String   @id @default(uuid())
  period    Int
  sum       Int
  nasiyaId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endDate   String?  @default("07.08.2025")
  Nasiya    Nasiya?  @relation(fields: [nasiyaId], references: [id])
}

model DebtorImage {
  id        String   @id @default(uuid())
  image     String
  sellerId  String?
  debtorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Debtor    Debtor?  @relation(fields: [debtorId], references: [id])
  Seller    Seller?  @relation(fields: [sellerId], references: [id])
}

model DebtorPhone {
  id        String   @id @default(uuid())
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  debtorId  String?
  Debtor    Debtor?  @relation(fields: [debtorId], references: [id])
}

model NasiyaImage {
  id        String   @id @default(uuid())
  image     String
  nasiyaId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Nasiya    Nasiya?  @relation(fields: [nasiyaId], references: [id])
}

enum Status {
  PENDING
  ACTIVE
}

enum Roles {
  ADMIN
  SUPER_ADMIN
}
